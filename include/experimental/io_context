#ifndef NET_IO_CONTEXT
#define NET_IO_CONTEXT

#include <experimental/executor>

#include <WinBase.h>
#include <algorithm>
#include <chrono>
#include <functional>
#include <limits>
#include <mutex>
#include <thread>
#include <vector>

namespace std::experimental::net
{
inline namespace v1
{
struct _Io_operation
{
    ::OVERLAPPED overlapped;
    function<void(_Io_operation*, DWORD)> operation;
};

class io_context : public execution_context
{
public:
    class executor_type
    {
    public:
        executor_type(const executor_type& other) noexcept = default;
        executor_type(executor_type&& other) noexcept = default;

        executor_type& operator=(const executor_type& other) noexcept = default;
        executor_type& operator=(executor_type&& other) noexcept = default;

        bool running_in_this_thread() const noexcept
        {
            lock_guard<mutex> lock{ ctx_->mtx_ };
            return find(ctx_->call_stack_.begin(), ctx_->call_stack_.end(), this_thread::get_id()) != ctx_->call_stack_.end();
        }

        io_context& context() const noexcept { return *ctx_; }

        void on_work_started() const noexcept;
        void on_work_finished() const noexcept;

        template <class Func, class ProtoAllocator>
        void dispatch(Func&& f, const ProtoAllocator& a) const
        {
            if (running_in_this_thread())
            {
                decay_t<Func> func{ forward<Func>(f) };
                func();
            }
            else
                post(forward<Func>(f), a);
        }
        template <class Func, class ProtoAllocator>
        void post(Func&& f, const ProtoAllocator& a) const;
        template <class Func, class ProtoAllocator>
        void defer(Func&& f, const ProtoAllocator& a) const
        {
            post(forward<Func>(f), a);
        }

        friend inline bool operator==(const executor_type& a, const executor_type& b) { return a.ctx_ == b.ctx_; }
        friend inline bool operator!=(const executor_type& a, const executor_type& b) { return !(a == b); }

    private:
        friend class io_context;

        explicit executor_type(io_context& ctx) : ctx_(&ctx) {}

        io_context* ctx_;
    };

    using count_type = size_t;

    io_context() : io_context(0) {}
    explicit io_context(int concurrency_hint) : concurrency_hint_(concurrency_hint < 0 ? 0 : concurrency_hint) { _Start(); }
    io_context(const io_context&) = delete;
    io_context& operator=(const io_context&) = delete;

    ~io_context() override { stop(); }

    executor_type get_executor() noexcept { return executor_type{ *this }; }
    HANDLE _Native_handle() noexcept { return port_; }

    count_type _Do_one(DWORD msec);

    count_type run_one() { return _Do_one(INFINITE); }
    template <class Clock, class Duration>
    count_type run_one_until(const chrono::time_point<Clock, Duration>& abs_time)
    {
        return _Do_one(chrono::duration_cast<chrono::milliseconds>(wait_traits<Clock>::to_wait_duration(abs_time)).count());
    }
    template <class Rep, class Period>
    count_type run_one_for(const chrono::duration<Rep, Period>& rel_time)
    {
        return _Do_one(chrono::duration_cast<chrono::milliseconds>(rel_time).count());
    }

    count_type run()
    {
        count_type n{ 0 };
        while (run_one())
            if (n != numeric_limits<count_type>::max())
                ++n;
        return n;
    }
    template <class Clock, class Duration>
    count_type run_until(const chrono::time_point<Clock, Duration>& abs_time)
    {
        count_type n{ 0 };
        while (run_one_until(abs_time))
            if (n != numeric_limits<count_type>::max())
                ++n;
        return n;
    }
    template <class Rep, class Period>
    count_type run_for(const chrono::duration<Rep, Period>& rel_time)
    {
        count_type n{ 0 };
        while (run_one_for(rel_time))
            if (n != numeric_limits<count_type>::max())
                ++n;
        return n;
    }

    count_type poll_one();
    count_type poll()
    {
        count_type n{ 0 };
        while (poll_one())
            if (n != numeric_limits<count_type>::max())
                ++n;
        return n;
    }

    void stop();
    bool stopped() const noexcept { return port_; }
    void restart()
    {
        stop();
        _Start();
    }

private:
    void _Start();

    friend struct _Io_context_monitor;

    int concurrency_hint_;
    HANDLE port_;
    mutable mutex mtx_;
    vector<thread::id> call_stack_;
};
} // namespace v1
} // namespace std::experimental::net

#endif
