#ifndef NET_NETFWD
#define NET_NETFWD

#define __cpp_lib_experimental_net 201803
#define __cpp_lib_experimental_net_extensible 201803

#ifdef NETWORKINGV1_EXPORTS
#define NET_API __declspec(dllexport)
#else
#define NET_API __declspec(dllimport)
#endif

#ifndef FLAGS_OPERATOR
#define FLAGS_OPERATOR(FlagsType)                                                                                 \
    constexpr FlagsType operator&(FlagsType f1, FlagsType f2) noexcept { return FlagsType{ (int)f1 & (int)f2 }; } \
    constexpr FlagsType operator|(FlagsType f1, FlagsType f2) noexcept { return FlagsType{ (int)f1 | (int)f2 }; } \
    constexpr FlagsType operator^(FlagsType f1, FlagsType f2) noexcept { return FlagsType{ (int)f1 ^ (int)f2 }; } \
    constexpr FlagsType operator~(FlagsType f) noexcept { return FlagsType{ ~(int)f }; }                          \
    constexpr FlagsType& operator&=(FlagsType& f1, FlagsType f2) noexcept { return f1 = (f1 & f2); }              \
    constexpr FlagsType& operator|=(FlagsType& f1, FlagsType f2) noexcept { return f1 = (f1 | f2); }              \
    constexpr FlagsType& operator^=(FlagsType& f1, FlagsType f2) noexcept { return f1 = (f1 ^ f2); }
#endif

#define NOMINMAX
#define WIN32_LEAN_AND_MEAN

#include <chrono>
#include <system_error>

namespace std
{
namespace experimental::net
{
inline namespace v1
{
inline void _Check_error_code(error_code& ec, const char* what)
{
    if (ec)
        throw system_error{ ec, what };
}

#define _CHECK_ERROR_CODE_INVOKE(invoke) \
    error_code ec{};                     \
    invoke;                              \
    _Check_error_code(ec, __func__)

#define _CHECK_ERROR_CODE_INVOKE_FUNC(invoke) \
    error_code ec{};                          \
    auto r{ invoke };                         \
    _Check_error_code(ec, __func__);          \
    return r

class execution_context;

template <class T, class Executor>
class executor_binder;

template <class Executor>
class executor_work_guard;

class system_executor;

class executor;

template <class Executor>
class strand;

class io_context;

template <class Clock>
struct wait_traits;

template <class Clock, class WaitTraits = wait_traits<Clock>>
class basic_waitable_timer;

using system_timer = basic_waitable_timer<chrono::system_clock>;
using steady_timer = basic_waitable_timer<chrono::steady_clock>;
using high_resolution_timer = basic_waitable_timer<chrono::high_resolution_clock>;

template <class Protocol>
class basic_socket;

template <class Protocol>
class basic_datagram_socket;

template <class Protocol>
class basic_stream_socket;

template <class Protocol>
class basic_socket_acceptor;

template <class Protocol, class Clock = chrono::steady_clock, class WaitTraits = wait_traits<Clock>>
class basic_socket_streambuf;

template <class Protocol, class Clock = chrono::steady_clock, class WaitTraits = wait_traits<Clock>>
class basic_socket_iostream;

namespace ip
{
class address;

class address_v4;
class address_v6;

template <class Address>
class basic_address_iterator;

using address_v4_iterator = basic_address_iterator<address_v4>;
using address_v6_iterator = basic_address_iterator<address_v6>;

template <class Address>
class basic_address_range;

using address_v4_range = basic_address_range<address_v4>;
using address_v6_range = basic_address_range<address_v6>;

class network_v4;
class network_v6;

template <class InternetProtocol>
class basic_endpoint;

template <class InternetProtocol>
class basic_resolver_entry;

template <class InternetProtocol>
class basic_resolver_results;

template <class InternetProtocol>
class basic_resolver;

class tcp;
class udp;
} // namespace ip
} // namespace v1
} // namespace experimental::net
} // namespace std

#endif
