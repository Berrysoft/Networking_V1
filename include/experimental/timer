#ifndef NET_TIMER
#define NET_TIMER

#include <chrono>
#include <experimental/io_context>

namespace std::experimental::net
{
inline namespace v1
{
template <class Clock>
struct wait_traits
{
    static typename Clock::duration to_wait_duration(const typename Clock::duration& d) { return d; }
    static typename Clock::duration to_wait_duration(const typename Clock::time_point& t)
    {
        auto now{ Clock::now() };
        if (now + Clock::duration::max() < t)
        {
            return Clock::duration::max();
        }
        else if (now - Clock::duration::min() > t)
        {
            return Clock::duration::min();
        }
        else
        {
            return t - now;
        }
    }
};

template <class Clock, class WaitTraits = wait_traits<Clock>>
class basic_waitable_timer
{
public:
    using executor_type = io_context::executor_type;
    using clock_type = Clock;
    using duration = typename clock_type::duration;
    using time_point = typename clock_type::time_point;
    using traits_type = WaitTraits;

    explicit basic_waitable_timer(io_context& ctx);
    basic_waitable_timer(io_context& ctx, const time_point& t);
    basic_waitable_timer(io_context& ctx, const duration& d);
    basic_waitable_timer(const basic_waitable_timer&) = delete;
    basic_waitable_timer(basic_waitable_timer&& rhs);

    ~basic_waitable_timer();

    basic_waitable_timer& operator=(const basic_waitable_timer&) = delete;
    basic_waitable_timer& operator=(basic_waitable_timer&& rhs);

    executor_type get_executor() noexcept;

    size_t cancel();
    size_t cancel_one();

    time_point expiry() const;
    size_t expires_at(const time_point& t);
    size_t expires_after(const duration& d);

    void wait();
    void wait(error_code& ec);

    template <class CompletionToken>
    auto async_wait(CompletionToken&& token);
};

using system_timer = basic_waitable_timer<chrono::system_clock>;
using steady_timer = basic_waitable_timer<chrono::steady_clock>;
using high_resolution_timer = basic_waitable_timer<chrono::high_resolution_clock>;
} // namespace v1
} // namespace std::experimental::net

#endif
