#ifndef NET_TIMER
#define NET_TIMER

#include <chrono>

namespace std
{
    namespace experimental::net
    {
        inline namespace v1
        {
            template <class Clock>
            struct wait_traits
            {
                static typename Clock::duration to_wait_duration(const typename Clock::duration& d);
                static typename Clock::duration to_wait_duration(const typename Clock::time_point& t);
            };

            template <class Clock, class WaitTraits = wait_traits<Clock>>
            class basic_waitable_timer;

            using system_timer = basic_waitable_timer<chrono::system_clock>;
            using steady_timer = basic_waitable_timer<chrono::steady_clock>;
            using high_resolution_timer = basic_waitable_timer<chrono::high_resolution_clock>;
        } // namespace v1
    } // namespace experimental::net
} // namespace std

#endif
