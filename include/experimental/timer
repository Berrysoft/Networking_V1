#ifndef NET_TIMER
#define NET_TIMER

#include <experimental/io_context>

#include <chrono>

namespace std::experimental::net
{
inline namespace v1
{
template <class Clock>
struct wait_traits
{
    static typename Clock::duration to_wait_duration(const typename Clock::duration& d) { return d; }
    static typename Clock::duration to_wait_duration(const typename Clock::time_point& t)
    {
        auto now{ Clock::now() };
        if (now + Clock::duration::max() < t)
        {
            return Clock::duration::max();
        }
        else if (now - Clock::duration::min() > t)
        {
            return Clock::duration::min();
        }
        else
        {
            return t - now;
        }
    }
};

template <class Clock, class WaitTraits>
class basic_waitable_timer
{
public:
    using executor_type = io_context::executor_type;
    using clock_type = Clock;
    using duration = typename clock_type::duration;
    using time_point = typename clock_type::time_point;
    using traits_type = WaitTraits;

    explicit basic_waitable_timer(io_context& ctx) : ex_(ctx.get_executor()), expiry_() {}
    basic_waitable_timer(io_context& ctx, const time_point& t) : ex_(ctx.get_executor()), expiry_(t) {}
    basic_waitable_timer(io_context& ctx, const duration& d) : ex_(ctx.get_executor()), expiry_(Clock::now() + d) {}
    basic_waitable_timer(const basic_waitable_timer&) = delete;
    basic_waitable_timer(basic_waitable_timer&& rhs) : ex_(move(rhs.ex_)), expiry_(rhs.expiry_) { rhs.expiry_ = {}; }

    ~basic_waitable_timer() { cancel(); }

    basic_waitable_timer& operator=(const basic_waitable_timer&) = delete;
    basic_waitable_timer& operator=(basic_waitable_timer&& rhs)
    {
        cancel();
        ex_ = move(rhs.ex_);
        expiry_ = rhs.expiry_;
        rhs.expiry_ = {};
        return *this;
    }

    executor_type get_executor() noexcept { return ex_; }

    size_t cancel();
    size_t cancel_one();

    time_point expiry() const { return expiry_; }
    size_t expires_at(const time_point& t)
    {
        size_t cancelled = cancel();
        expiry_ = t;
        return cancelled;
    }
    size_t expires_after(const duration& d) { return expires_at(Clock::now() + d); }

    void wait(error_code&)
    {
        ex_.dispatch([this] {
            while (Clock::now() < expiry_)
                this_thread::sleep_for(traits_type::to_wait_duration(expiry_)); }, allocator<void>{});
    }
    void wait() { _CHECK_ERROR_CODE_INVOKE(wait(ec)); }

    template <class CompletionToken>
    auto async_wait(CompletionToken&& token);

private:
    executor_type ex_;
    time_point expiry_;
};

using system_timer = basic_waitable_timer<chrono::system_clock>;
using steady_timer = basic_waitable_timer<chrono::steady_clock>;
using high_resolution_timer = basic_waitable_timer<chrono::high_resolution_clock>;
} // namespace v1
} // namespace std::experimental::net

#endif
